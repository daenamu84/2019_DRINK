1. sts-3.7.3.RELEASE 폴더  STS.ini 파일 
	-Duser.name="xxxx"   본인특정 ID로 변경.
    -vm   자바경로 확인.

2. maven 설정 경로 
   - D:\WIZWID_framework\maven\repository
   <localRepository>D:\WIZWID_framework\maven\repository</localRepository>  경로 확인.

3. local repository  외부 jar 설정시
   오라클 jdbc
   	-mvn install:install-file -Dfile=D:\WIZWID_framework\bin\legacyLib\ojdbc14.jar -DgroupId=local.com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4 -Dpackaging=jar -DgeneratePom=true    
		<dependency>
			<groupId>local.com.oracle</groupId>
			<artifactId>ojdbc14</artifactId>
			<version>10.2.0.4</version>
		</dependency>

4.  기본 구조
    controller
    service    --  트랜잭션 처리
    module     --  모듈별 빈
    dao
   

5. 설치 이클립스 플러그인
	- Grep Console 3.7.0(MarketPlace)
		로그 메시지를 비주얼 하게 보임
	- Properties Edit (MarketPlace)
		프로퍼티파일 한글 표기
	- More Clipboard 1.3.0(MarketPlace)
		Ctrl + Shift + V를 누르면 클립보드 내에 들어간 목록이 보임

6. tomcat  메모리정보 출력 (garbage collectors)
D:\WIZWID_framework\bin\apache-tomcat-8.0.30\bin\catalina.bat 에 추가 

set atlassian_timestamp=%DATE:~0,4%%DATE:~5,2%%DATE:~8,2%_%TIME:~0,2%%TIME:~3,2%%TIME:~6,2%
set atlassian_timestamp=%atlassian_timestamp: =0%
set atlassian_timestamp=%atlassian_timestamp:/=-%
set atlassian_logsdir=%~dp0..\logs

set CATALINA_OPTS=%CATALINA_OPTS% -server -Xms512m -Xmx1024m 
set CATALINA_OPTS=%CATALINA_OPTS% -Xloggc:"%atlassian_logsdir%\gc-%atlassian_timestamp%.log"
set CATALINA_OPTS=%CATALINA_OPTS% -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=2M -XX:+PrintGCCause
set CATALINA_OPTS=%CATALINA_OPTS% -XX:+PrintGCDetails -XX:+PrintGCTimeStamps

7. grep console 설정
myBatis : (\QmyBatisSql\E)
exception Handler : (\Qcom.wizwid.commonHandler.Exception.ExceptionHandlingController\E)


/*

DB 정보

DB -oracle ( server.xml ) 추가
  <GlobalNamingResources>
		<Resource auth="Container" defaultAutoCommit="false" driverClassName="oracle.jdbc.driver.OracleDriver" 
				factory="org.apache.tomcat.jdbc.pool.DataSourceFactory" 
				initialSize="10" maxActive="500" maxIdle="100" maxWait="-1" minEvictableIdleTimeMillis="3600000" 
				name="jdbc/WIZWIDTest" password="" testWhileIdle="true" timeBetweenEvictionRunsMillis="60000" 
				type="javax.sql.DataSource" url="jdbc:oracle:thin:@211.48.20.70:1521:wizibs" username="" 
				validationQuery="SELECT 1 FROM DUAL"/>		 
  </GlobalNamingResources>		 
  
  -context.xml 추가  : <WatchedResource>  태그 위에다 추가 합니다.
  <ResourceLink auth="Container" global="jdbc/WIZWIDTest" name="jdbc/WIZWIDTest" type="javax.sql.DataSource"/>			
  
*/


======================================================================================
스프링 트랜잭션은  한 service 에서  같은 클래스 내에  다른 메소드를 호출시  Propagation.REQUIRES_NEW 를 사용 한다 하더라고  트랜잭션은 new 가 되지 않고  전부다 동일 트랜잭션으로 인식한다.
새로운 트랜잭션을 사용 할 경우는 다른 클래스service의 메소드에  Propagation.REQUIRES_NEW를 선언하고  호출 하면    기존에 service와 새로운 srvice의  메소드들은  서로 다른 트랜잭션이 된다.

- Aservice 
      a(){
        b();
        c();
      }
      
      @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)
      b(){
      	insert
      }
      
      @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)
      c(){
      	insert
      		error 발생
      }
    -------------  결과 ------------
    b()  insert 
    c()  insert
    error
    b,c 둘다  rollback
    -------------------------------
    같은 클래스 내에서는   REQUIRES_NEW 가 적용 되지 않는다.
    
- 방안 
Aservice 
      a(){
        Bservice.b1();
        Bservice.c1();
      }
      
Bservice
	  @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)
      b1(){
      	insert
      }
      
      @Transactional(propagation = Propagation.REQUIRES_NEW, rollbackFor = Exception.class)
      c1(){
      	insert
      		error 발생
      }  
	    -------------  결과 ------------
	    b()  insert 
	    c()  insert
	    error
	    b,c는 서로 다른 트랜잭션으로 인식  
	    b는 정상 insert,  c는  에러로 인해  rollback 
	    -------------------------------

